{"version":3,"sources":["components/Main/ProductList/ProductList.module.css","components/Favorite/Favorite.module.css","components/Main/ProductList/ProductCard/ProductCard.module.css","store/actions.jsx","store/reducer.jsx","components/NavBar/SearchBar/SearchBar.jsx","components/NavBar/NavBar.jsx","components/Main/Filters/Filter/Checkbox/Checkbox.jsx","components/Main/Filters/Filter/CheckboxFilter.jsx","components/Main/Filters/Filter/SliderFilter.jsx","components/Main/Filters/Filter/Filter.jsx","components/Main/Filters/filterList.js","components/Main/Filters/Filters.jsx","queries/queries.jsx","components/Favorite/Favorite.jsx","utils/utils.jsx","components/Main/ProductList/ProductCard/ProductCard.jsx","components/Main/ProductList/ProductList.jsx","components/Main/DropdownSort/DropdownSort.jsx","components/Main/Main.jsx","components/ProductInfo/PIHeader.jsx","components/ProductInfo/PIList.jsx","components/ProductInfo/PIText.jsx","components/ProductInfo/ProductInfo.jsx","components/Overview/Overview.jsx","App.jsx","index.jsx","components/Main/Main.module.css","components/Main/Filters/Filter/Checkbox/Checkbox.module.css","components/ProductInfo/ProductInfo.module.css"],"names":["module","exports","addFilter","filter","type","initState","searchWord","sort","filters","country","vintage","packaging","eco","kosher","bioDynamic","green_packaging","gluten","volume","price","pricePerLiter","alcohol","tannins","fullness","freshness","sweetness","bitterness","connect","addSearchWord","resetFilter","withRouter","history","useState","setSearchWord","onSearch","push","className","onChange","event","target","value","onKeyPress","e","key","preventDefault","placeholder","aria-label","onClick","NavBar","href","src","width","height","alt","activeStyle","color","pointerEvents","data-cy","to","Checkbox","selected","toggleChecked","classes","checked","indexOf","id","Label","htmlFor","filterKey","options","alternatives","temp","a","length","map","min","max","step","setValue","useEffect","marks","Filter","name","show","setShow","showClass","Filters","index","GET_PRODUCTS","gql","GET_ONE_PRODUCT","TOGGLE_FAVORITE","GET_WATCHES","Favorite","productId","isFavorited","favorited","setFavorited","useMutation","toggleFavorite","favorite-button","variables","currencyFormatNO","num","toFixed","replace","numberFormatNO","toString","ProductCard","img","style","position","zIndex","CardImage","join","card-title","fromEntries","Object","entries","query","useQuery","limit","skip","loading","error","data","loader","role","products","totalCount","isMorePages","pageStart","loadMore","fetchMore","updateQuery","previousResult","fetchMoreResult","__typename","hasMore","CardGroup","addSort","Main","Controls","SearchResults","ProductList","PIHeader","text","subtext","PIList","list","el","PIText","title","Product","useParams","product","alcosizeliter","props","children","freshfullsweet","countrydistrictvintage","district","booleans","fairTrade","Img","taste","InfoContainer","aroma","goodWith","method","url","Overview","watches","countries","types","parseInt","chartType","colors","legend","toggle","App","exact","path","component","ProductInfo","store","createStore","state","action","link","createHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71d2c227.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardGroup\":\"ProductList_CardGroup__yvZEB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Favorite\":\"Favorite_Favorite__YD45d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardImage\":\"ProductCard_CardImage__3ou4W\"};","//Updates redux store after a search is done\nexport const ADD_SEARCH_WORD = \"ADD_SEARCH_WORD\"; \nexport const RESET_FILTER = \"RESET_FILTER\";\nexport const ADD_FILTER = \"ADD_FILTER\"; \nexport const ADD_SORT = \"ADD_SORT\"; \n\n\nexport const addSearchWord = (searchWord) => ({\n    type: ADD_SEARCH_WORD, \n    searchWord\n});\n\nexport const addFilter = (filter) => ({\n    type: ADD_FILTER, \n    filter\n});\n\nexport const resetFilter = () => ({\n    type: RESET_FILTER,\n});\n\nexport const addSort = (sort) => ({\n    type: ADD_SORT, \n    sort\n}); ","import { ADD_SEARCH_WORD, ADD_FILTER, RESET_FILTER, ADD_SORT } from \"./actions\"; \n\n\nconst initState = {\n    searchWord: \"\",\n    sort: \"-favorites\",\n    filters: {\n        type: null,\n        country: null,\n        vintage: null,\n        packaging: null,\n        eco: null,\n        kosher: null,\n        bioDynamic: null,\n        green_packaging: null,\n        gluten: null,\n        volume: null,\n        price: null,\n        pricePerLiter: null,\n        alcohol: null,\n        tannins: null,\n        fullness: null,\n        freshness: null,\n        sweetness: null,\n        bitterness: null,\n    }\n};\n\n\n// Handles all action cases who should update or add elements to the store\nexport const rootReducer = (state = initState, action) => { \n    switch (action.type) { \n        case ADD_SEARCH_WORD:\n            return {\n                ...state,\n                searchWord: action.searchWord,   \n            };\n\n        case ADD_FILTER:\n            return {\n                ...state,\n                filters: { ...state.filters, ...action.filter }  \n            };\n\n        case RESET_FILTER:\n            return {\n                filters: {\n                    type: null,\n                    country: null,\n                    vintage: null,\n                    packaging: null,\n                    eco: null,\n                    kosher: null,\n                    bioDynamic: null,\n                    green_packaging: null,\n                    gluten: null,\n                    volume: null,\n                    price: null,\n                    pricePerLiter: null,\n                    alcohol: null,\n                    tannins: null,\n                    fullness: null,\n                    freshness: null,\n                    sweetness: null,\n                    bitterness: null,\n                }\n            };\n\n        case ADD_SORT: \n            return{\n                ...state, \n                sort: action.sort,\n            };\n\n        default: \n            return state;\n    };\n};\n\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { addSearchWord, resetFilter } from \"../../../store/actions\"; \n\n\nconst SearchBar = ({ resetFilter, addSearchWord, history }) => {\n\n    // A local state keeps track of the value in the input field\n    const [searchWord, setSearchWord] = useState(\"\");\n\n    const onSearch = () => {\n\n        // If you search, the filters should be reset\n        resetFilter();\n\n        // Updates the redux state to match the local searchWord\n        addSearchWord(searchWord);\n\n        // Redirects you to the front-page\n        history.push(\"/\");\n    };\n\n    // If you press enter, it will also search\n    const onEnterPress = e => {\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            onSearch();\n        };\n    };\n\n    return (\n        <form className=\"form-inline mx-auto\">\n            <div className=\"form-group my-auto\">\n                <input \n                    onChange={event => setSearchWord(event.target.value)}\n                    onKeyPress={ onEnterPress }\n                    className=\"form-control mr-sm-2\"\n                    type=\"search\" \n                    placeholder=\"Søk på produkt\"\n                    aria-label=\"Søk på produkt\">\n                </input>\n                <div>\n                    <button className=\"btn gl-btn-outline-polet d-none d-sm-block ml-2 my-2 my-sm-0\" type=\"button\" onClick={ onSearch }>Søk</button>\n                </div>\n            </div>\n        </form>\n    );\n};\n\n\n// Imports the reducer-methods to addSearchWord and to resetFilter.\n\n// withRouter adds the possibility to redirect to the main page while still keeping the state\nexport default connect(null, { addSearchWord, resetFilter })(withRouter(SearchBar));\n","import React from \"react\";\n\nimport SearchBar from \"./SearchBar/SearchBar\";\nimport { NavLink } from \"react-router-dom\";\n\nconst NavBar = () => (\n    <nav className=\"navbar fixed-top navbar-expand-lg bg-white navbar-light border-bottom border-secondary\">\n\n        <a className=\"navbar-brand\" href=\"/\">\n\n            <img src=\"polet-logo.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"logo\" />\n            <span className=\"d-none d-sm-inline\"> Fyllikoholiker </span>\n            \n        </a>\n\n        <SearchBar />\n\n        {/* When the link is activated, it becomes disabled */}\n        <NavLink activeStyle={{color: \"#DDD\", pointerEvents: \"none\"}} data-cy=\"Oversikt\" to=\"/overview\" className=\"gl-text-polet-hover\"> Oversikt </NavLink>\n\n    </nav>\n);\n\n\nexport default NavBar;\n","import React from \"react\";\n\nimport classes from \"./Checkbox.module.css\";\n\n\nconst Checkbox = ({ alt, selected, toggleChecked }) => ( \n    <div>\n\n        {/* When selected, call toggleChecked(). To see if a checkbox should be checked, see if it is in the \"selected\"-list */}\n        <input className={ classes.Checkbox } type=\"checkbox\" onChange={ toggleChecked } checked={ selected.indexOf(alt) !== -1 } value={ alt } id={ alt } />\n\n        <label data-cy={ alt } className={ classes.Label } htmlFor={ alt }> { alt } </label>\n\n    </div>\n);\n\nexport default Checkbox;","import React from \"react\";\nimport { connect } from \"react-redux\"; \n\nimport { addFilter } from \"../../../../store/actions\"; \nimport Checkbox from \"./Checkbox/Checkbox\";\n\n\nconst CheckboxFilter = ({ filterKey, options, addFilter, filters }) => {\n    \n    // Fetches the current filter from all the filters\n    const selected = filters[filterKey] || [];\n\n    const { alternatives } = options;\n\n    // Adds the checked element to the list if it's not already there. Removes if unchecked\n    const toggleChecked = (e) => {\n        const { value, checked } = e.target;\n\n\n        let temp = selected ? selected.filter(a => a !== value) : [];\n        if (checked) temp.push(value);\n\n        // If array is empty, change it to null\n        temp = temp.length === 0 ? null : temp;\n\n        addFilter({ [filterKey]: temp });\n    }\n\n\n    return( \n        <>\n            { alternatives.map(alt => (\n                <Checkbox\n                    key={ alt }\n                    alt={ alt }\n                    selected={ selected }\n                    toggleChecked={ toggleChecked }\n                />\n            )) }\n        </>\n    );\n};\n\n\nconst mapStateToProps = ({ filters }) => ({\n    filters\n});\n\nexport default connect(mapStateToProps, { addFilter })(CheckboxFilter);","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\"; \nimport { Range } from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nimport { addFilter } from \"../../../../store/actions\"; \n\n\nconst SliderFilter = ({ filterKey, options, addFilter, filters }) => {\n    \n    const { min, max, step } = options;\n    const selected = filters[filterKey];\n\n    // Local state is changed whenever the slider is moved, while redux state is changed whenever you release it.\n    const [value, setValue] = useState([min, max]);\n\n\n    // If the selected redux-store-filter has changed and it now is null, reset the local state\n    useEffect(() => {\n\n        if(selected === null) setValue([min, max]);\n        \n    }, [selected, min, max]);\n\n\n    // Sets where the markers are on the slider\n    const marks = {};\n    marks[value[0]] = value[0];\n    marks[value[1]] = value[1];\n\n    return (\n        <div className=\"m-2\">\n            {/* <Range\n                onAfterChange={ () => addFilter({ [filterKey]: value }) }\n                onChange={setValue}\n                min={ min }\n                max={ max }\n                value={ value }\n                marks={ marks }\n                step={ step }\n                handleStyle={ [{ borderColor: \"#C2B067\" } , { borderColor: \"#C2B067\" }] }\n                trackStyle={ [{ backgroundColor: \"#C2B067\" }] }\n                railStyle={ { backgroundColor: \"rgb(235, 232, 222)\" } }\n            /> */}\n        </div>\n    );\n};\n\n\nconst mapStateToProps = ({ filters }) => ({\n    filters,\n});\n\nexport default connect(mapStateToProps, { addFilter })(SliderFilter);","import React, { useState } from \"react\";\n\nimport CheckBoxFilter from \"./CheckboxFilter\";\nimport SliderFilter from \"./SliderFilter\";\n\n\nconst Filter = ({ name, filterKey, type, options }) => {\n\n    const [show, setShow] = useState(false);\n\n\n    const showClass = show ? \"show\" : null;\n\n    let filter = null;\n\n    // Depending on the incoming props, the filter is either CheckBoxFilter or SliderFilter\n    if(type === \"checkbox\") {\n        filter = <CheckBoxFilter filterKey={ filterKey } options={ options }/>\n    } else if (type === \"slider\") {\n        filter = <SliderFilter filterKey={ filterKey } options={ options }/>\n    }\n\n\n    return (\n        <>\n            {/* When you click on a filter-header, it will toggle open and toggle collapsed */}\n            <div className=\"card-footer gl-bg-polet-light cursor-pointer\" data-cy={ name } onClick={() => setShow(!show)}>\n                { name } \n                <div className=\"float-right text-polet\"> \n                    { show ? \"▲\" : \"▼\" }\n                </div>\n            </div>\n\n            <div className={\"card-body collapse \" + showClass}>\n                { filter }\n            </div>\n        </>\n    );\n};\n\n\nexport default Filter;\n","\nconst productTypes = [\"Akevitt\", \"Portvin\", \"Vodka\", \"Druebrennevin\", \"Whisky\", \"Likør\", \"Gin\", \"Bitter\", \"Rødvin\", \"Hvitvin\", \"Rosévin\", \"Musserende vin\", \"Rom\", \"India pale ale\", \"Sider\", \"Annen type\"];\n\nconst countries = [\"Norge\", \"Tyskland\", \"Portugal\", \"Frankrike\", \"Skottland\", \"Italia\", \"USA\", \"Spania\", \"Sør-Afrika\", \"Annet land\"];\n\n\n\n\nexport default [\n    {\n        name:\"Type\",\n        filterKey:\"filterType\",\n        type:\"checkbox\",\n        options: { alternatives: productTypes }\n    },\n    {\n        name:\"Land\",\n        filterKey:\"filterCountry\",\n        type:\"checkbox\",\n        options: { alternatives: countries }\n    },\n    {\n        name:\"Volum (cl)\",\n        filterKey:\"volume\",\n        type:\"slider\",\n        options: { min: 0, max: 2000, step: 10 }\n    },\n    {\n        name:\"Pris (kr)\",\n        filterKey:\"price\",\n        type:\"slider\",\n        options: { min: 0, max: 42000, step: 10 }\n    },\n    {\n        name:\"Pris per liter (kr)\",\n        filterKey:\"pricePerLiter\",\n        type:\"slider\",\n        options: { min: 0, max: 60000, step: 10 }\n    },\n    {\n        name:\"Alkohol (%)\",\n        filterKey:\"alcohol\",\n        type:\"slider\",\n        options: { min: 0, max: 60, step: 1 }\n    }\n];","import React from \"react\";\n\nimport Filter from \"./Filter/Filter\";\nimport filters from \"./filterList\";\n\n// Loads filters from the filterList-file and translates to JSX\nconst Filters = () => (\n\n    <div className=\"card\">\n        <div className=\"card-header gl-bg-polet\">\n            Filter results \n        </div>\n\n        { filters.map((filter, index) => (\n            <Filter \n            key={ index }\n            name={ filter.name }\n            filterKey={ filter.filterKey }\n            type={ filter.type } \n            options={ filter.options }\n            />\n        ))}\n\n    </div>\n);\n\n\nexport default Filters;\n","// A collection of all the queries the client issues to the server\nimport { gql } from \"apollo-boost\"; \n\n\nexport const GET_PRODUCTS = gql`\n  query Products($searchWord: String!, $limit: Int, $skip: Int, $filters: FilterInputObject, $sort: String){\n        products(search: $searchWord, limit: $limit, skip: $skip, filters: $filters, sort: $sort) {\n            products {\n                id\n                isFavorited\n                img\n                name\n                volume\n                type\n                country\n                price\n                alcohol\n            }\n        totalCount\n        }\n    }\n`;\n\nexport const GET_ONE_PRODUCT = gql`\n    query Product($id: String!) {\n        product(id: $id){\n            id\n            isFavorited\n            date\n            name\n            volume\n            price\n            pricePerLiter\n            alcohol\n            type\n            tannins\n            fullness\n            freshness\n            sweetness\n            bitterness\n            color\n            aroma\n            taste\n            goodWith\n            country\n            district\n            vintage\n            method\n            sugar\n            img\n            packaging\n            url \n            eco\n            bioDynamic\n            fairTrade\n            green_packaging\n            gluten\n        }   \n    }\n`;\n\nexport const TOGGLE_FAVORITE = gql`\n    mutation toggleFavorite($productId: String!){\n        toggleFavorite(productId: $productId){\n            id\n            product {\n                id\n                name\n            }\n            user {\n                id\n            }\n        }\n    }\n`;\n\nexport const GET_WATCHES = gql`\n    query {\n        watches {\n            countries\n            types\n        }\n    }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { TOGGLE_FAVORITE } from \"../../queries/queries\";\nimport classes from \"./Favorite.module.css\";\n\n\nconst Favorite = ({ productId, isFavorited }) => {\n\n    const [favorited, setFavorited] = useState(isFavorited);\n\n    // If the product is favorited, display a filled heart\n    let src = favorited ? \"icons/favorite-solid.svg\" : \"icons/favorite-regular.svg\";\n    \n    // Fetches the toggleFavorite mutation from the backend\n    const [toggleFavorite] = useMutation(TOGGLE_FAVORITE);\n\n    return (\n        <div \n            className={ classes.Favorite }\n            favorite-button=\"fav\"            \n            onClick={() => { \n                setFavorited(!favorited);\n                toggleFavorite({ variables: { productId } });\n            }} \n        >\n            <img \n                src={ src } \n                alt=\"Toggle favorite\"\n            />\n        </div>\n    );\n};\n\n\nexport default Favorite;\n","export function currencyFormatNO(num) {\n    return (\n        num\n        .toFixed(2) // always two decimal digits\n        .replace('.', ',') // replace decimal point character with ,\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ')\n    ) // use ' ' as a separator\n}\n\nexport function numberFormatNO(num) {\n    return (\n        num\n        .toString()\n        .replace('.', ',') // replace decimal point character with ,\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ')\n    ) // use ' ' as a separator\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport Favorite from '../../../../components/Favorite/Favorite.jsx';\nimport classes from \"./ProductCard.module.css\";\nimport { currencyFormatNO, numberFormatNO } from '../../../../utils/utils';\n\n\nconst ProductCard = ({ id, isFavorited, img, name, volume, type, country, price, alcohol }) => (\n    <div data-cy=\"unique-product\">\n        <div style={{ position: \"absolute\", zIndex: \"1000\" }}>\n            <Favorite productId={ id } isFavorited={ isFavorited } />\n        </div>\n        \n        <div className=\"card\">\n\n            <div className=\"gl-text-align-center mx-auto\">\n                <img className={ [\"card-img-top\", classes.CardImage].join(\" \") } src={ img } alt=\"preview of product\"/>\n            </div>\n\n            <div className=\"card-body\"  data-cy=\"unique-card\">\n\n                {/* stretched-link from bootstrap makes the link cover the card */}\n                <NavLink to={\"product/\" + id} className=\"gl-text-polet-hover stretched-link\" >\n                <h5 className=\"card-title\" card-title={ name }> { name } </h5>\n                </NavLink>\n                <h6 className=\"card-text text-muted\"> { type }{ country ? \", \" + country : null } </h6>\n\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\"> <b>Pris:</b> { currencyFormatNO(price) } kr </li>\n                    <li className=\"list-group-item\"> <b>Prosent:</b> { numberFormatNO(alcohol) } % </li>\n                    <li className=\"list-group-item\"> <b>Størrelse:</b> { numberFormatNO(volume) } liter  </li>\n                </ul>\n            </div>\n\n        </div>\n    </div>\n);\n\n\nexport default ProductCard;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\"; \nimport { connect } from \"react-redux\"; \nimport InfiniteScroll from \"react-infinite-scroller\";\nimport classes from \"./ProductList.module.css\";\nimport ProductCard from \"./ProductCard/ProductCard\";\nimport { GET_PRODUCTS } from \"../../../queries/queries\";\nimport fromEntries from \"fromentries\";\n\nconst ProductList = ({ searchWord, filters, sort, isFavorited }) => {\n\n    // Gets all the filters from the redux state, removes all nulls\n    filters = fromEntries(Object.entries(filters).filter(([key, value]) => ( value !== null )));\n\n    if(isFavorited) filters.isFavorited = true;\n\n\n    // Queries products from the database, 12 elements at a time\n    const query = useQuery(GET_PRODUCTS, {variables: { searchWord, filters, sort, limit: 12, skip: 0 }}); \n    const { loading, error, data } = query;\n\n    const loader = (\n        <div className=\"spinner-grow text-warning ml-3\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n        </div>\n    )\n\n    if (loading) return loader;\n\n    if (error) return <p>Error.....</p>;\n\n    const { products, totalCount } = data.products;\n\n\n    // Fetches next page \n    const onLoadMore = () => (\n\n        // Method included in apollo, queries the next products and appends the list of products to the already saved ones\n        query.fetchMore({\n        variables: {\n            skip: products.length\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n            if (!fetchMoreResult) return previousResult;\n            return {\n            products: {\n                products: [ ...previousResult.products.products, ...fetchMoreResult.products.products],\n                totalCount: previousResult.products.totalCount,\n                __typename: \"ProductsResult\"\n            }\n            };\n        }\n        })\n    );\n\n\n    // Checks if there are more pages, this is used by the InfiniteScroll-component\n    const isMorePages = totalCount-products.length !== 0;\n\n    return (\n\n        <InfiniteScroll\n            pageStart={0}\n            loadMore={ onLoadMore }\n            hasMore={ isMorePages }\n            loader={ loader }\n        >\n\n            <i> Showing { totalCount } results </i>\n\n            <div className={ classes.CardGroup }>\n\n                { products.map(({ id, isFavorited, img, name, volume, type, country, price, alcohol })  => (\n                <ProductCard\n                    id = { id }\n                    key={ id }\n                    isFavorited = { isFavorited }\n                    img={ img }\n                    name={ name }\n                    volume={ volume }\n                    type={ type } \n                    country={ country }\n                    price={ price }\n                    alcohol={ alcohol }\n                />\n                ))}\n\n            </div>\n\n        </InfiniteScroll>\n    );\n};\n\n\nconst mapStateToProps = ({ searchWord, filters, sort }) => ({\n    searchWord,\n    filters, \n    sort\n});\n\nexport default connect(mapStateToProps, null)(ProductList);\n","import React from \"react\"; \nimport { connect } from \"react-redux\"; \n\nimport { addSort } from \"../../../store/actions\"; \n\n\nconst DropdownSort = ({ addSort }) => (\n    <select className=\"form-control col-4\" onChange={(e) => addSort(e.target.value)}>\n        <option value=\"-favorites\"> Mest favoritiserte </option>\n        <option value=\"-watches\"> Mest sette </option>\n        <option value=\"price\"> Pris (laveste først) </option>\n        <option value=\"-price\"> Pris (høyeste først) </option>\n        <option value=\"-alcohol\"> Alkohol (høyeste først) </option>\n        <option value=\"alcohol\"> Alkohol (laveste først) </option>\n        <option value=\"-pricePerLiter\"> Literpris (høyeste først) </option>\n        <option value=\"pricePerLiter\"> Literpris (laveste først) </option>\n        <option value=\"-volume\"> Volum (høyeste først) </option>\n        <option value=\"volume\"> Volum (laveste først) </option>\n    </select>\n);\n\n// When the select changes, the value from the selected options gets added to the redux state\nexport default connect(null, { addSort })(DropdownSort);","import React from \"react\";\n\nimport Filters from \"./Filters/Filters.jsx\"; \nimport ProductList from \"./ProductList/ProductList\"; \nimport DropdownSort from \"./DropdownSort/DropdownSort\"; \nimport classes from \"./Main.module.css\";\n\nconst Main = () => (\n\n    <div className={ classes.Main }>\n\n        <div className={\"container-fluid \" + classes.Controls }>\n            <div className=\"row\">\n                <div className=\"col-8 w-50\" >\n                    <h3 className={ classes.SearchResults }> Søkeresultater </h3>\n                </div>\n                <DropdownSort/>\n            </div>\n        </div>\n\n        <div className={ classes.Filters }>\n            <Filters/>\n        </div>\n\n        <div className={ classes.ProductList }>\n            <ProductList/>\n        </div>\n\n    </div>\n);\n\nexport default Main;\n","import React from \"react\";\n\n\nconst PIHeader = ({ text, subtext }) => {\n\n    if(!text && !subtext) return null;\n\n    return (\n        <div>\n            <h1> \n                { text } \n            </h1>\n            <h6> \n                { subtext }\n            </h6>\n        </div>\n    );\n};\n\n\nexport default PIHeader; \n","import React from \"react\";\n\n\nconst PIList = ({ list }) => {\n\n    if(!list || list.length === 0) return null;\n\n    return (\n        <div>\n        <ul className=\"list-group list-group-flush\">\n            {list.map((el,index) => <li key={index} className=\"list-group-item\"> {el} </li>)}\n        </ul>\n    </div>\n    );\n};\n\n\nexport default PIList; \n","import React from \"react\";\n\n\nconst PIText = ({ title, text }) => {\n\n    if(!text || text === \", , \") return null;\n\n    return (\n        <div>\n            <h6> { title } </h6>\n            <p>\n                { text }\n            </p>\n        </div>\n    );\n};\n\n\nexport default PIText; \n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport Favorite from '../Favorite/Favorite';\n\nimport { GET_ONE_PRODUCT } from '../../queries/queries';\nimport classes from \"./ProductInfo.module.css\";\nimport { currencyFormatNO, numberFormatNO } from '../../utils/utils';\nimport PIHeader from \"./PIHeader\";\nimport PIList from \"./PIList\";\nimport PIText from \"./PIText\";\n\n\nconst Product = () => {\n\n    //Fetches the id from the url\n    const { id } = useParams();\n\n    //Queries the product with the correct id\n    const { loading, error, data } = useQuery(GET_ONE_PRODUCT, {variables: { id } });\n    \n\n    if (loading) return (\n        <div className=\"spinner-grow text-warning\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n    \n    if (error) return <p>Error.......</p>;\n\n    const { product }  = data;\n\n\n\n    // Formatting all the data we want presented as lists\n    const alcosizeliter = [\n        <><b> Alkohol: </b> { numberFormatNO(product.alcohol) }% </>,\n        <><b> Størrelse: </b> { numberFormatNO(product.volume) } litres </>,\n        <><b> Literpris: </b> { currencyFormatNO(product.pricePerLiter) } kr/liter </>,\n    ].filter(a => a.props.children[2] !== \"0\" && a.props.children[2] !== \"0,00\");\n    // Filtering out the 0-values by checking them from the JSX-children\n\n    const freshfullsweet = [\n        <><b> Friskhet: </b> { product.freshness } av 12</>, \n        <><b> Fylde: </b> { product.fullness } av 12</>, \n        <><b> Sødme: </b> { product.sweetness } av 12</>\n    ].filter(a => a.props.children[2] !== 0);\n\n    const countrydistrictvintage = [\n        <><b> Land: </b> { product.country }</>, \n        <><b> Distrikt: </b> { product.district }</>, \n        <><b> Årgang: </b> { product.vintage }</>\n    ].filter(a => a.props.children[2] !== \"\");\n\n\n    // These are always defined in the databas, so no filtering\n    const booleans = [\n        <><b> Kosher: </b> { product.kosher ? \"Ja\" : \"Nei\" }</>, \n        <><b> Økologisk: </b> { product.eco ? \"Ja\" : \"Nei\" }</>, \n        <><b> Grønn forpakning: </b> { product.green_packaging ? \"Ja\" : \"Nei\" }</>, \n        <><b> Glutenfri: </b> { product.gluten ? \"Ja\" : \"Nei\" }</>, \n        <><b> Fair Trade: </b> { product.fairTrade ? \"Ja\" : \"Nei\" }</>, \n    ];\n\n\n\n    return (\n        <div className=\"gl-main-container\">\n            <img className={ classes.Img } src={ product.img } alt=\"\" />\n            <h1> {product.name } </h1>\n            { product.taste ? <i> {product.taste} </i> : null  }\n            <Favorite productId={ product.id } isFavorited={ product.isFavorited } />\n\n            <hr/>\n\n            <div className={ classes.InfoContainer }>\n                <PIHeader text={ \"Kr. \" + currencyFormatNO(product.price) } />\n                <PIText title=\"Produkttype\" text={ product.type }/>\n\n                <PIList list={ alcosizeliter }/>\n                <PIList list={ freshfullsweet }/>\n                <PIList list={ countrydistrictvintage }/>\n\n                <PIText title=\"Smak og aroma\" text={ product.aroma }/>\n                <PIText title=\"Passer til\" text={ product.goodWith.join(\", \") } />\n                <PIText title=\"Lagringsgrad\" text={ product.method} />\n                <PIText title=\"Farge\" text={ product.color }/>\n\n                <PIList list={ booleans }/>\n                <PIList list={ countrydistrictvintage }/>\n\n                <div>\n                    <h6>\n                        Link til Vinmonopolet\n                    </h6>\n                    <a href={ product.url }> \n                        { product.url } \n                    </a>\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default Product; \n","import React from 'react';\nimport { Chart } from 'react-google-charts';\nimport { useQuery } from '@apollo/react-hooks'; \n\nimport { GET_WATCHES } from '../../queries/queries';\nimport ProductList from \"../Main/ProductList/ProductList\";\n\n\nconst Overview = () => {\n\n    // Queries the watches from the backend\n    const query = useQuery(GET_WATCHES);\n    const { loading, error, data } = query;\n\n    const loader = (\n        <div className=\"spinner-grow text-warning ml-3\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n\n    if (loading) return loader;\n\n    if (error) return <p> Error..... </p>;\n    \n    let { countries, types } = data.watches;\n\n\n\n    // Converts the data to be integers, so the google charts can understand them\n    countries = countries.map(a => [a[0], parseInt(a[1])]);\n    types = types.map(a => [a[0], parseInt(a[1])]);\n\n    // If there's no data, insert empty data.\n    if(countries.length === 0) countries = [\"\", 0]\n    if(types.length === 0) types = [\"\", 0]\n\n\n    return (\n        <div className=\"gl-main-container container\">\n\n            <h1> Besøkstatistikk </h1> \n            <h6 className=\"text-polet-dark\"><i> Et besøk registreres når en bruker klikker seg inn på et produkt </i></h6>\n            <hr/>\n\n\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <Chart\n                        height=\"400px\"\n                        chartType=\"BarChart\"\n                        loader={\"Loading\"}\n                        data={[\n                            [\"Type\", \"Besøk\"],\n                            ...types\n                        ]}\n                        options={{\n                            title: 'Antall besøk per produkttype',\n                            colors: ['#C2B067'],\n                            legend: \"none\",\n                            toggle: false,\n\n                        }}\n                    />\n                </div>\n\n                <div className=\"col-lg-6\">\n                    <Chart\n                        height=\"400px\"\n                        chartType=\"BarChart\"\n                        loader={\"Loading\"}\n                        data={[\n                            [\"Land\", \"Besøk\"],\n                            ...countries\n                        ]}\n                        options={{\n                            title: 'Antall besøk per land',\n                            colors: ['#C2B067'],\n                            legend: \"none\"\n                            \n                        }}\n                    />\n                </div>\n\n            </div>\n\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h1> Dine favoritter </h1>\n                    <hr/>\n                    <ProductList isFavorited={true} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nexport default Overview;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Main from \"./components/Main/Main\";\nimport ProductInfo from \"./components/ProductInfo/ProductInfo\";\nimport Overview from \"./components/Overview/Overview\";\n\n\nconst App = () => (\n    <HashRouter>\n      <NavBar/>\n      <Route exact path=\"/\" component={ Main } />\n      <Route path=\"/product/:id\" component={ ProductInfo } />\n      <Route path=\"/overview\" component={ Overview } />\n    </HashRouter>\n);\n\n\nexport default App;","import React from 'react';\nimport { createStore } from 'redux'; \nimport { createHttpLink } from 'apollo-link-http'\nimport ApolloClient from 'apollo-client'; \nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { Provider } from 'react-redux'; \nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { rootReducer } from './store/reducer';\nimport App from './App';\nimport './index.css';\n\n\nconst store = createStore(rootReducer);  \n\n// Defines the URI for the backend\nconst uri = \"http://it2810-26.idi.ntnu.no:4000\";\n\n// Adds credentials so it picks up on the SET-COOKIE header from the server\nconst link = createHttpLink({\n    uri,\n    credentials: 'include',\n});\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link\n}); \n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </ApolloProvider>, document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__CYWXU\",\"ProductList\":\"Main_ProductList__3GFWe\",\"Filters\":\"Main_Filters__1jXZI\",\"Controls\":\"Main_Controls__mWqgX\",\"SearchResults\":\"Main_SearchResults__1mzVS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkbox\":\"Checkbox_Checkbox__1I2rG\",\"Label\":\"Checkbox_Label__3WA_B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Img\":\"ProductInfo_Img__3aXSL\",\"InfoContainer\":\"ProductInfo_InfoContainer__DcT-J\"};"],"sourceRoot":""}